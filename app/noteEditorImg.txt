import { React, useState, useEffect } from 'react';
import { StyleSheet, SafeAreaView, KeyboardAvoidingView, Platform } from 'react-native';
import NoteTopBar from '../components/noteTopBar';
import { RichText, Toolbar, useEditorBridge, TenTapStartKit, CoreBridge, DEFAULT_TOOLBAR_ITEMS, useBridgeState, ImageBridge, editorHtml } from '@10play/tentap-editor';
import NoteMenuModal from '../components/noteMenuModal';
import * as FileSystem from 'expo-file-system';
import * as ImagePicker from 'expo-image-picker';
import { manipulateAsync, SaveFormat } from 'expo-image-manipulator';
import image_icon from '../assets/image_icon.png';

const themeProps = {
   toolbar: {
      toolbarBody: {
         borderTopColor: '#575757',
         borderBottomColor: '#575757',
         backgroundColor: '#0A1328',
         paddingLeft: 5
      },
      toolbarButton: {
         backgroundColor: '#0A1328',
      },
      icon: {
         backgroundColor: '#0A1328',
         tintColor: '#ebecf0',
      },
      iconActive: {
         backgroundColor: '#5E6B79',
         tintColor: '#ebecf0',
         borderRadius: 5,
      },
      iconDisabled: {
         tintColor: '#8A9DB2'
      },
      iconWrapper: {
         backgroundColor: 'trasparent',
      },
      iconWrapperActive: {
         backgroundColor: 'transparent'
      },
      iconWrapperDisabled: {
         backgroundColor: 'transparent'
      },
   },
   webview: {
      backgroundColor: '#14191F',
   },
   webviewContainer: {
      paddingLeft: 18,
      paddingRight: 18,
      marginTop: 2,
      paddingBottom: 2,
      backgroundColor: '#14191F',
   },
}

const newStyle = `'* { background-color: #14191F; color: white; caret-color: skyblue; } ::selection { background-color: skyblue; color: black; }'`

const injectedJavaScript = `
   (function() {
      const style = document.createElement('style');
      style.innerHTML = ${newStyle};
      document.head.appendChild(style);
   })();`

var newToolBar

if (DEFAULT_TOOLBAR_ITEMS.length === 15) {
   newToolBar = DEFAULT_TOOLBAR_ITEMS.splice(8, 1)
   newToolBar = DEFAULT_TOOLBAR_ITEMS.splice(7, 1)
   newToolBar = DEFAULT_TOOLBAR_ITEMS.splice(5, 1)
}

const NoteEditorImg = () => {
   const [isMenuOn, setIsMenuOn] = useState(false)
   const [maxWidth, setMaxWidth] = useState(0)
   const [isLoading, setIsLoading] = useState(true)

   const editor = useEditorBridge({
      autofocus: true,
      avoidIosKeyboard: true,
      bridgeExtensions: [
         ...TenTapStartKit,
         ImageBridge.configureExtension({ inline: true, allowBase64: true }),
      ],
      theme: themeProps
   })

   const editorState = useBridgeState(editor)

   useEffect(() => {
      if (isMenuOn) { setIsMenuOn(true) }
      else { editor.setEditable(true) }
   }, [isMenuOn])

   const pickImage = async () => {
      let result = await ImagePicker.launchImageLibraryAsync({
         mediaTypes: ImagePicker.MediaTypeOptions.Images,
         allowsEditing: false,
         quality: 0.5,
      })

      if (!result.canceled) {
         let newUri = FileSystem.cacheDirectory + result.assets[0].fileName

         try {
            if (result.assets[0].width > 350) {
               let manipResult = await manipulateAsync(
                  newUri,
                  [{ resize: { width: 350 } }],
                  { compress: 1, format: SaveFormat.PNG }
               )
               FileSystem.moveAsync({
                  from: manipResult.uri,
                  to: newUri,
               })
            }
            else {
               FileSystem.moveAsync({
                  from: result.assets[0].uri,
                  to: newUri,
               })
            }
         }
         catch (err) {
            console.error(err)
         }

         editor.setImage(newUri)
         editor.setEditable()
         editor.focus('end')
      }
   }

   const getMaxWidth = (event) => {
      const { width } = event.nativeEvent.layout;
      setMaxWidth(width)
   }

   return (
      <SafeAreaView style={styles.container} onLayout={getMaxWidth}>
         <NoteTopBar setIsMenuOn={setIsMenuOn} />
         <RichText editor={editor}
            injectedJavaScript={injectedJavaScript}
            allowFileAccess={true}
            allowFileAccessFromFileURLs={true}
            allowUniversalAccessFromFileURLs={true}
            originWhitelist={['*']}
            mixedContentMode="always"
            allowingReadAccessToURL={FileSystem.cacheDirectory}
            textZoom={110}
         />
         <KeyboardAvoidingView
            behavior={Platform.OS === 'ios' ? 'padding' : 'height'}
            style={styles.keyboardAvoidingView}
         >
            <Toolbar editor={editor} hidden={false}
               items={[
                  {
                     onPress: () => () => {
                        pickImage()
                        // editor.setEditable()
                        // editor.focus('end')
                        // editor.updateScrollThresholdAndMargin(20)
                     },
                     active: () => false,
                     disabled: () => false,
                     image: () => image_icon,
                  },
                  ...DEFAULT_TOOLBAR_ITEMS,
               ]}
            />
         </KeyboardAvoidingView>
         <NoteMenuModal isMenuVisible={isMenuOn} setIsMenuVisible={setIsMenuOn} />
      </SafeAreaView>

   );
};

export default NoteEditorImg

const styles = StyleSheet.create({
   container: {
      flex: 1,
      backgroundColor: '#14191F',
   },
   keyboardAvoidingView: {
      position: 'absolute',
      width: '100%',
      bottom: 0,
   },
});
